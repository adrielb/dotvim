global !p
import os
from vimsnippets import complete

GEOM_TYPES=[
	  'jitter'
	, 'point'
	, 'histogram'
	, 'raster'
	, 'line'
]
POS_TYPES=[
	'dodge'
	, 'fill'
	, 'jitter'
	, 'jitterdodge'
	, 'stack'
	, 'identity'
]
LINE_TYPES=[
	'blank'
	,'solid'
	,'dashed'
	,'dotted'
	,'dotdash'
	,'longdash'
	,'twodash'
]
SEPARATE_TYPES=[
	'error'
	,'drop'
	,'merge'
]
endglobal

snippet install "install a R package"
install.packages( "${1}" )
endsnippet

snippet length "length"
length(${0})
endsnippet

snippet rep "repeat element"
rep( ${1:item}, ${2:times})
endsnippet

snippet matrix "matrix function"
matrix(${1:data}, nrow = ${2:rows}, ncol = ${0:cols})
endsnippet

snippet ifelse "ifelse"
ifelse(${1:test}, ${2:yes}, ${3:no})
endsnippet

snippet apply "apply function"
apply(${1:array}, ${2:margin}, ${0:function})
endsnippet

snippet lapply "lapply function"
lapply(${1:list}, ${0:function})
endsnippet

snippet sapply "sapply function"
sapply(${1:list}, ${0:function})
endsnippet

snippet vapply "vapply function"
vapply(${1:list}, ${2:function}, ${0:type})
endsnippet

snippet mapply "mapply function"
mapply(${1:function}, ${0:...})
endsnippet

snippet tapply "tapply function"
tapply(${1:vector}, ${2:index}, ${0:function})
endsnippet

snippet rapply "rapply function"
rapply(${1:list}, ${0:function})
endsnippet

snippet runif "uniform dist"
runif( ${1:n}, min=${2:0}, max=${3:1} )
endsnippet

snippet rnorm "generate normal deviates"
rnorm(${1:n}, mean=${2:0}, sd=${3:1})
endsnippet

snippet mvrnorm "multivariate normal samples"
library(MASS)
mvrnorm(${1:n}, ${2:mu}, ${3:Sigma})
endsnippet

snippet rbinom "generate binomial samples"
rbinom(${1:nobs}, ${2:size}, ${3:prob})
endsnippet

snippet rbern "generate bernoulli samples"
rbinom(${1:nobs}, 1, ${2:prob})
endsnippet

# deSolve ODE {{{
snippet ode "deSolve ode()"
ode( y=${1:ic}, times=${2:times}, func=${3:func} parms=${4:parameters})
endsnippet

snippet odefunc "deSolve ODE function" b
${1:model} <- function (t, state, parameters) {
  with( as.list( c(state, parameters) ), {
    dX <- a*X + Y*Z
    dY <- b * (Y-Z)
    dZ <- -X*Y + c*Y - Z
    list( c(dX, dY, dZ) )
  }) # end with()
}
endsnippet
# }}}

#
# dplyr {{{
snippet as_data_frame "dplyr data frame"
as_data_frame()
endsnippet

snippet filter "filter" b
filter(${1})
endsnippet

snippet inner_join "returns all rows from x matching in y"
inner_join( ${1:x}, ${2:y}, by=${3:NULL})
endsnippet

snippet left_join "returns all rows from x"
left_join( ${1:x}, ${2:x}, by=${3:NULL})
endsnippet

snippet semi_join "retuns all rows from x matching in y"
semi_join( ${1:x}, ${2:x}, by=${3:NULL})
endsnippet

snippet anti_join "returns all rows from x NOT matching in y"
anti_join( ${1:x}, ${2:x}, by=${3:NULL})
endsnippet

snippet filterin "filter in" 
filter( ${1:col} %in% c(${2:"f1","f2","..."}) )
endsnippet
# }}}

#
# tidyr {{{
snippet gather "gather cols into key-value pairs"
gather( ${1:key}, ${2:value}, ${3:cols} )
endsnippet

snippet separate "split variables clumped into one col"
separate( ${1:col}, into=c("${2:param}", "${3:idx}"), sep =
"[^[:alnum:]]+", remove=TRUE, convert=FALSE, extra="$4`!p snip.rv=complete(t[4],SEPARATE_TYPES)`")
endsnippet

snippet spread "spread a key-value pair across multiple columns"
spread( ${1:key}, ${2:value}, fill=NA, convert=FALSE, drop=TRUE)
endsnippet


snippet tidyr::complete
tidyr::complete(${0})
endsnippet
snippet tidyr::expand
tidyr::expand(${0})
endsnippet
snippet tidyr::extract
tidyr::extract(${0})
endsnippet
snippet tidyr::extract_numeric
tidyr::extract_numeric(${0})
endsnippet
snippet tidyr::fill
tidyr::fill(${0})
endsnippet
snippet tidyr::gather
tidyr::gather(${0})
endsnippet
snippet tidyr::nest
tidyr::nest(${0})
endsnippet
snippet tidyr::replace_na
tidyr::replace_na(${0})
endsnippet
snippet tidyr::separate
tidyr::separate(${0})
endsnippet
snippet tidyr::seq_range
tidyr::seq_range(${0})
endsnippet
snippet tidyr::spread
tidyr::spread(${0})
endsnippet
snippet tidyr::unite
tidyr::unite(${0})
endsnippet
snippet tidyr::unnest
tidyr::unnest(${0})
endsnippet

# }}}

#
# ggplot2 {{{
snippet linetype "ggplot line types"
linetype="$1`!p snip.rv=complete(t[1],LINE_TYPES)`")
endsnippet

snippet qplot "quick ggplot" b
qplot( x=${1:x}, y=${2:y}, data=${3:df}, color=${4:group}, geom="$5`!p snip.rv=complete(t[5],GEOM_TYPES)`")
endsnippet

snippet ggplot "new ggplot" b
ggplot( data=${1:df}, aes(x=${2:time}, y=${3:value})) +
$0
endsnippet

snippet xlim "xlim" b
xlim(${1:NA}, ${2:NA})
endsnippet

snippet ylim "ylim" b
ylim(${1:NA}, ${2:NA})
endsnippet


# one variable plots
snippet geom_density "geom_density" b
geom_density()
endsnippet

snippet geom_histogram "geom_histogram" b
geom_histogram( binwidth=5 )
endsnippet

snippet geom_bar "geom_bar" b
geom_bar()
endsnippet

snippet geom_ribbon "geom_ribbon" b
geom_ribbon(aes(x=m, ymin=mu-se, ymax=mu+se), alpha=0.1, fill='red')
endsnippet

# graphical primitives
snippet geom_path "geom_path" b
geom_path( lineend='butt', linejoin='round', linemitre=1)
endsnippet

snippet geom_rect "geom_rect" b
geom_rect()
endsnippet

snippet geom_abline "geom_abline" b
geom_abline( intercept=0, slope=1, size=2, color='red', alpha=0.5)
endsnippet

snippet geom_hline "geom_hline" b
geom_hline( yintercept=${1:0}, size=2, color='red', alpha=0.5)
endsnippet

snippet geom_vline "geom_vline" b
geom_vline( xintercept=${1:0}, size=2, color='red', alpha=0.5)
endsnippet

# two variable plots
snippet geom_blank "geom_blank" b
geom_blank()
endsnippet

snippet geom_jitter "ggplot jitter" b
geom_jitter( position=position_jitter(width=0.5, height=0.5))
endsnippet

snippet geom_point "geom_point" b
geom_point()
endsnippet

snippet geom_quantile "geom_quantile" b
geom_quantile()
endsnippet

snippet geom_rug "geom_rug" b
geom_rug()
endsnippet

snippet geom_smooth "geom_smooth" b
geom_smooth()
endsnippet

snippet geom_text "geom_text" b
geom_text( aes(label=${1:lbl} )
endsnippet

snippet geom_bin2d "geom_bin2d" b
geom_bin2d( binwidth=c(1,1) )
endsnippet

snippet geom_density2d "geom_density2d" b
geom_density2d()
endsnippet

snippet geom_hex "geom_hex" b
geom_hex()
endsnippet

snippet geom_line "geom_line" b
geom_line()
endsnippet

snippet geom_boxplot "geom_boxplot" b
geom_boxplot()
endsnippet

# three variable plots
snippet geom_contour "geom_contour" b
geom_contour(aes(z=${1:z}))
endsnippet

snippet geom_raster "geom_raster" b
geom_raster( aes(fill=${1:z}), hjust=0.5, vjust=0.5, interpolate=FALSE)
endsnippet

snippet geom_tile "geom_tile" b
geom_tile( aes(fill=${1:z}) )
endsnippet

# error bars
snippet geom_crossbar "geom error bars" b
geom_crossbar( fatten=2 )
endsnippet

snippet geom_errorbar "geom error bars" b
geom_errorbar()
endsnippet

snippet geom_linerange "geom error bars" b
geom_linerange()
endsnippet

snippet geom_pointrange "geom error bars" b
geom_pointrange()
endsnippet

# faceting
snippet facet_grid "subplots on discrete values" b
facet_grid( .~${1:group} )
endsnippet

snippet facet_wrap "subplots in rectangular layout" b
facet_wrap( ~${1:group}, scales="free_y" )
endsnippet

# labels
snippet ggtitle "plot title" b
ggtitle( "${1:Plot title}" )
endsnippet

snippet xlab "X axis label" b
xlab( "${1:X label}" )
endsnippet

snippet ylab "Y axis label" b
ylab( "${1:Y label}" )
endsnippet

# save
snippet ggsave "ggplot2 save" b
ggsave( "${1:filename}.png", width=11, height=${2:8.25}, dpi=190, path="figures")
endsnippet

# position of geoms that occupy the same space
snippet position "arrange overlapping geoms"
position=position_$1`!p snip.rv=complete(t[1],POS_TYPES)`()
endsnippet

snippet function "plot a function" b
ggplot(data.frame(x=c(0,2)),aes(x)) +
	stat_function(fun=function(x) ${1:x})
endsnippet

snippet theme "no legend" b
theme(legend.position="none")
endsnippet

snippet grid.arrange "grid of plots" b
grid.arrange(${1:plots}, ncol=${2:1})
endsnippet

# }}}

#
# RStan {{{
snippet libstan "rstan dplyr libs" b
# libs # {{{
library(grid)
library(gridExtra)
library(ggplot2)
library(dplyr)
library(tidyr)
library(rstan) 
options(dplyr.print_min=45)
options(max.print=450)
rstan_options(auto_write=TRUE)
# }}}


endsnippet

snippet dso "compile stan" b
dso.$1 <- NULL
dso.$1 <- stan_model( stanc_ret=stanc(file="./${1}.stan"))
endsnippet

snippet sampling "sampling"
# sampling {{{
chains <- ${3:4}
iter <- ${4:2e1}
warmup <- ${5:1e1}
$6 <- NULL
${6:samples} <- sampling(${1:dso}
	, data=${2:datalist}
	, chains=chains
	, iter=warmup+iter
	, warmup=warmup
)

print($6)

traceplot($6)

pairs($6, pars=c("lp__"))

df.stats <- monitor($6,print=F) %>% as.data.frame() 
df.stats$params <- row.names(df.stats)
df.stats <- df.stats %>% separate( params, into=c("param", "ti")
		, sep = "[\\\\[\\\\]]", remove=TRUE, convert=TRUE, extra="drop")
df.stats %>% select( param, ti) %>% distinct(param)

# }}}
endsnippet

snippet traceplot "traceplot" b
traceplot(${1:samples}${2:, inc_warmup=FALSE, par="lp__"})
endsnippet

snippet extract "rstan extract"
$3 <- NULL
${3:df} <- as.data.frame(${1:samples},pars=c(${2:"lp__")})) %>% tbl_df() %>% 
	mutate(sample=factor(1:(chains*iter))) %>% 
	gather( param, value, -sample) %>% 
	separate( param, into=c("param", "d", "ti")
		, sep="[\\\\[\\\\]]", convert=TRUE, extra="drop") %>% 
	print()
endsnippet
# }}}
