snippet blocks "stan blocks" b
functions { # {{{

} # }}}

data { #{{{
	${0}
} #}}}

transformed data { #{{{

} #}}}

parameters { #{{{

} #}}}

transformed parameters { #{{{

} #}}}

model { #{{{

} #}}}

generated quantities { #{{{

} #}}}
endsnippet

snippet model
model {
	
}
endsnippet

snippet if
if (${1:condition}) {
	${0}
}
endsnippet

snippet real
real<lower=${1:lower},upper=${2:upper}> ${3:variable}[${4:dims}];
endsnippet

snippet vector "vector" b
vector[${1:N}] ${2:var};
endsnippet

snippet matrix "matrix" b
matrix[${1:N},$1] ${2:Sigma};
endsnippet

snippet cov_matrix "cov_matrix" b
cov_matrix[${1:N}] ${2:Sigma};
endsnippet

snippet for
for (${1:i} in ${2:1}:${3:N}) {
	${0}
}
endsnippet

snippet printvar
print( "${1:var} = ", $1 );
endsnippet

snippet printlp "print lp" b
print( "lp = ", get_lp());
endsnippet

snippet head "head"
head(${1:vec},${2:n});
endsnippet

snippet tail "tail"
tail(${1:vec},${2:n});
endsnippet

snippet segment "segment [i, i+n-1]"
segment(${1:vec},${2:i},${3:n});
endsnippet

snippet ~ "normal sampling"
~ normal( ${1:mu}, ${2:sigma} );
endsnippet

snippet ~ "multi normal chol"
~ multi_normal_cholesky( ${1:mu}, ${2:L} );
endsnippet

snippet normal_rng
normal_rng( ${1:mu}, ${2:sigma} );
endsnippet

snippet ~ "cauchy sampling"
~ cauchy( ${1:mu}, ${2:sigma} );
endsnippet

snippet ~ "beta sampling"
~ beta( ${1:alpha}, ${2:beta} );
endsnippet

snippet ~ "gamma sampling"
~ gamma( ${1:alpha}, ${2:beta} );
endsnippet

snippet chol "cholesky decomposition"
cholesky_decompose(${1:Sigma});
endsnippet

snippet rep "rep array" b
rep_array( ${1:0}, ${2:N});
endsnippet

snippet rep "rep vector" b
rep_vector( ${1:0}, ${2:N});
endsnippet
