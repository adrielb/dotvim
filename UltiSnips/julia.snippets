snippet REPL "REPL comment" Ab
""" REPL {{{

${0}

}}} """
endsnippet

snippet savefig
savefig(p, "imgs/`!p snip.rv = snip.basename`_${1:name}.png")
savefig(p, (@__DIR__) * "/${1:name}.png")
endsnippet

snippet Base.show "show type" b
Base.show(io::IO, ${2}::${1}) = print(io, ${0})
endsnippet

snippet Array{Float64,1} "standard vector type"
Array{Float64,1}
endsnippet

snippet println "print new line" b
println("${1:msg}")
endsnippet

snippet while "while loop" b
while ${1:cond}
	${0}
end
endsnippet

snippet comprehension "list comprehension"
Float64[ i+j for i=1:M, j=1:N]
endsnippet

snippet map "map() do"
map(${1:rng}) do ${2:var}
	${0}
end
endsnippet

snippet let "let block" Ab
let
	${0}
end
endsnippet

snippet func "function declaration" bA
function ${1:f}(${2})
	${0}
end
endsnippet

snippet struct "immutable struct" Ab
struct ${1:name}${2: <: ${3:supertype}}
	${0}
end
endsnippet

snippet if "if condition" Ab
if${1}
	${0}
end
endsnippet

snippet for "for loop" Ab
for${1} in ${2:RANGE}
	${0}
end
endsnippet

snippet @testset "test set" Ab
@testset "${1:description}" begin
	${0}
end
endsnippet

snippet tests "module tests" bA
using Test
function tests()
	@testset "${1}" begin
		${0}
	end
end
endsnippet

snippet abstract "abstract type" Ab
abstract type ${1:name}${2: <: ${3:supertype}} end
endsnippet

snippet mutable "mutable type with constructor" Ab
mutable struct ${1:typename}
	${0}
	${2:function $1()
		temp = new()
		return temp
	end}
end


endsnippet

snippet module "module" Ab
module ${1:`!p snip.rv = snip.basename`}

${0}

end  # module

endsnippet

snippet linspace
linspace(${1:start},${2:stop},${3:n})
endsnippet

snippet Array "an uninitialized dense array"
Array(${1:type}, ${2:dim})
endsnippet

snippet reshape "change dimensions of array"
reshape(${1:A},${2:dims})
endsnippet

snippet zeros "array of zeros"
zeros(${1:type}, ${2:dims})
endsnippet

snippet zerosA "array of zeros of same type and shape of A"
zeros(${1:A})
endsnippet

snippet fill "create array filled with a value"
fill(${1:val}, ${2:dims})
endsnippet

snippet fill! "fill! array A with value x"
fill!(${1:A},${2:x})
endsnippet

snippet quadgk "numerical integration"
(sol, err) = quadgk(${1:f},${2:a},${3:b})
endsnippet
 
snippet cvode "solve and plot ODE" b
using Sundials
using Vega

function f(t, y, ydot)
	ydot[1] = -0.04*y[1] + 1.0e4*y[2]*y[3]
	ydot[3] = 3.0e7*y[2]*y[2]
	ydot[2] = -ydot[1] - ydot[3]
end

t=collect(linspace(0, 10, 30))
ic=[1.0,0.0,0.0]
res = Sundials.cvode( f, ic, t)

lineplot(x=t,y=res[:,1])
endsnippet

snippet stack "wide to long"
stack(${1:df}, [:${2:measurement_vars}])
endsnippet

snippet rand "pick a random element"
rand(${1:dist}, ${2:dims})
endsnippet

snippet rand! "random samples"
rand!(${1:dist},${2:vec})
endsnippet

snippet take "take first n elements"
take(${1:iter},${2:n})
endsnippet

snippet include "Evaluate source file in current context"
include("./${1:file}.jl")
endsnippet

snippet forenumerate "for loop using enumeration" b
for (i, v) in enumerate(${1:list})
	${0}
end

endsnippet

snippet profile "statistical timimg" b
using Profile
using ProfileView
function profile_$1
	$1
	Profile.clear()
	@profile ${1:func}
	open("/tmp/profile_flat.txt","w") do s
		Profile.print(IOContext(s, :displaysize=>(24, 700)), format=:flat, sortedby=:count)
	end
	open("/tmp/profile_tree.txt","w") do s
		Profile.print(IOContext(s, :displaysize=>(24, 700)))
	end
	ProfileView.view()
end
endsnippet

snippet profile-mem "track-allocation" b
function profile_${1:func}()
	sol = $1()
	Profile.clear_malloc_data()
	sol = $1()
	print(hash(sol))
end
endsnippet

snippet lint "lint a file" b
using Lint

lintfile("./${1:file}.jl")
endsnippet

# Distributions
snippet Normal "normal distribution type"
Normal(${1:mean},${2:sigma})
endsnippet

snippet MvNormal "multivariate normal"
MvNormal(${1:mean_vector},${2:Cov_matrix})
endsnippet

snippet InverseWishart "Inverse Wishart"
InverseWishart(${1:dof},${2:PDmat})
endsnippet

snippet Cauchy "Cauchy dist type"
Cauchy(${1:location},${2:scale})
endsnippet

snippet Gamma "Gamma dist type"
Gamma(${1:shape},${2:scale})
endsnippet

snippet Categorical "Categorical dist with equal prob"
Categorical(${1:K_int})
endsnippet

snippet Categorical "Categorical dist with prob vec"
Categorical(${1:p_vec})
endsnippet

snippet Multinomial "Multinomial with prob vec"
Multinomial(${1:n_trials},${2:p_vec})
endsnippet

snippet Multinomial "Multinomial with equal prob"
Multinomial(${1:n_trials},${2:k_int})
endsnippet

snippet logpdf "log(pdf(x))"
logpdf(${1:dist},${2:rng})
endsnippet

snippet loglikelihood "logL wrt samples x"
loglikelihood(${1:dist},${2:x})
endsnippet


# Unit Testing
snippet @test_approx_eq "test for equality given small tolerance"
@test_approx_eq ${1:a} ${2:b}
endsnippet

snippet @test_approx_eq_eps "tests for equality given tolerance"
@test_approx_eq_eps ${1:a} ${2:b} ${3:eps}
endsnippet

snippet @test_broken "test should pass but currently fails"
@test_broken ${1:expression}
endsnippet

snippet @test_skip "don't run test, mark as broken"
@test_skip ${1:expression}
endsnippet

snippet @inferred "checks for type stability"
@inferred ${1:expression}
endsnippet

snippet @code "warn/llvm/native/time"
@code_warntype ${1:expression}
@code_llvm $1
@code_native $1
@time $1
endsnippet

snippet MDP "MDP interface" b
module `!p snip.rv = snip.basename`
using BaseModel
using Dates
using Parameters
using Random
using POMDPs
using POMDPPolicies
using POMDPSimulators
using OnlineStats
using Plots
$0
const Action = Bool

struct State
	ti::Int64
end

@with_kw struct MyMDP <: MDP{State, Action}
	dummy = 1
end

function POMDPs.initialstate(mdp::MyMDP, rng::AbstractRNG)
	s0 = State(0)
	return s0
end

function POMDPs.gen(::DDNNode{:sp}, mdp::MyMDP, s0::State, a::Action, rng::AbstractRNG)
	s1 = State(s0.ti+1)
	return s1
end

POMDPs.isterminal(mdp::MyMDP, s::State) = s.ti == 10

POMDPs.reward(mdp::MyMDP, ::State, ::Action, s1::State) = ifelse(isterminal(mdp, s1), 1.0, 0.0)

POMDPs.discount(mdp::MyMDP) = 1.0

struct MyPolicy <: Policy
end

function POMDPs.action(policy::MyPolicy, ::State)
	return Action(1)
end

function history_sim(mdp = MyMDP(), policy = MyPolicy())
	sim = HistoryRecorder()
	N = 10
	p = scatter(N)
	for i in 1:N
		history = simulate(sim, mdp, policy)
		for s in state_hist(history)
			push!(p, i, (s.ti, s.ti))
		end
	end
	p
end

function main()
	mdp = MyMDP()
	policy = MyPolicy()
	sims(mdp, policy)
end

function sims(mdp = MyMDP(), policy = MyPolicy())
	print_sim(mdp, policy)
	@show policy_evaluation(mdp, policy)
	history_sim(mdp, policy)
end

end  # module

endsnippet
