snippet shebang "python3 executable" b
#!/usr/bin/env python3
${0}
endsnippet
	
snippet imp "common imports" b
# imports {{{
%matplotlib notebook
import numpy as np
np.set_printoptions(suppress=True, linewidth=125)
import pandas as pd
pd.set_option('display.width', 125)
pd.options.display.max_rows = 20
pd.options.display.max_colwidth = 125
pd.options.display.max_columns = 20
pd.options.display.width = 125
import seaborn as sns
import matplotlib.pyplot as plt
sns.set()
plt.ion()
plt.style.use('seaborn-poster')
plt.rcParams['figure.figsize'] = (10.0, 10.0)
%load_ext autoreload
%autoreload 2
# }}}
endsnippet

snippet jpdb "jupyter-console breakpoint"
__import__('IPython.core.debugger').core.debugger.set_trace()
endsnippet
	
snippet bp "breakpoint" b
%debug --breakpoint ${1:FILE}:${2:LINE} ${3:statement}
endsnippet

snippet forenum "enumerate loop" b
for idx, value in enumerate(${1:list}):
	print(idx, value)
endsnippet

snippet defi "def __init__()"
def __init__(self):
	super().__init__()
	${0}
endsnippet

snippet scrapyshell "invoke shell to inspect responses" b
from scrapy.shell import inspect_response
inspect_response(response, self)
endsnippet

snippet subplots "" b
fig, axs = plt.subplots(${1:rows}, ${2:cols}, sharex=True, num='${3:plot_name}', clear=True)
for ax in axs:
	ax.clear()
ax = axs[0]
ax.set_ylabel('${0}')
ax.scatter()
endsnippet

snippet plot "plot figure" b
plt.tight_layout()
fig = plt.figure(1, clear=True)
ax = fig.gca()
ax.set_title("")
ax.set_xlabel("")
ax.set_ylabel("")
ax.set_xlim(auto=True)
ax.set_ylim(auto=True)
ax.plot(${1}, ${2}, label='', color='red' )
ax.legend(loc='upper left')
fig.canvas.draw()
fig.show()
endsnippet

snippet add_subplot "" w
add_subplot(${1:nrows}, ${2:ncols}, ${3:plot_number})
endsnippet

snippet timeit "performance timing" b
import timeit
start = timeit.default_timer()
${1}
end = timeit.default_timer()
print( (end - start) , "sec" )
endsnippet

snippet tfscope "tf variable scope" b
with tf.variable_scope("${1:name}"):
	${0}
endsnippet

snippet tfmodel "new tensorflow model" b
tf.reset_default_graph()
${0}

model = tf.global_variables_initializer()
with tf.Session() as sess:
	writer = tf.summary.FileWriter("tf_logs/3", sess.graph)
	sess.run(model)
	writer.close()
endsnippet

snippet modelpytorch "new pytorch model" b
import torch
import torch.nn.functional as F
from torch.autograd import Variable
from torch.nn import Parameter


class Model(torch.nn.Module):
	def __init__(self):
		super().__init__()

	def forward(self, x):
		return x


hist = []
model = Model()
optimizer = torch.optim.Adam(model.parameters()
	, lr=0.01
	, weight_decay=0.001)
loss_fn = torch.nn.MSELoss()

for epoch in range(2):
	for input, labels in training_data:
		model.train(True)
		optimizer.zero_grad()
		output = model(input)
		loss = loss_fn(output, labels)
		loss.backward()
		optimizer.step()
		model.train(False)
		hist.append(loss.data[0])
		print(epoch, loss.data[0,0])

plt.clf()
plt.plot(hist[:])
endsnippet

snippet pivot "pandas pivot" i
pivot(index='${1:index}', columns='${2:columns}'${3:, values='${4:values}'})
endsnippet

snippet create "create table if not exists" b
create table if not exists ${1:table_name} as
endsnippet

snippet transaction "try transaction" b
try:
	cursor.execute('begin')
	${0}
except:
	cursor.execute('rollback')
	raise 
else:
	cursor.execute('commit')
endsnippet

snippet singleton "Borg Singleton design pattern"
class Borg:
	__singleton = {}
	def __init__(self):
		self.__dict__ = self.__singleton
endsnippet

snippet readfile
with open("${1:filename}") as fp:
	data = fp.read()
endsnippet
